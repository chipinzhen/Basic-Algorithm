class selectiveSort(object):
    def __init__(self):
        pass
    
    def sort(self, ls, mode=1, copy=True):
        # mode:1 min to max; else, max to min
        # copy: True, create a new list and doesn't change the original list; else, change the original list.
        
        from copy import deepcopy
        if copy:
            ls_copy = deepcopy(ls)
            if mode == 1:
                for i in range(len(ls_copy)):
                    k = i
                    for j in range(i, len(ls_copy)):
                        if ls_copy[j] < ls_copy[k]:
                            k = j
                    ls_copy[i], ls_copy[k] = ls_copy[k], ls_copy[i]
            else:
                for i in range(len(ls_copy)):
                    k = i
                    for j in range(i, len(ls_copy)):
                        if ls_copy[j] > ls_copy[k]:
                            k = j
                    ls_copy[i], ls_copy[k] = ls_copy[k], ls_copy[i]
            return ls_copy
        else:
            if mode == 1:
                for i in range(len(ls)):
                    k = i
                    for j in range(i, len(ls)):
                        if ls[j] < ls[k]:
                            k = j
                    ls[i], ls[k] = ls[k], ls[i]
            else:
                for i in range(len(ls)):
                    k = i
                    for j in range(i, len(ls)):
                        if ls[j] > ls[k]:
                            k = j
                    ls[i], ls[k] = ls[k], ls[i]

            return ls





class InsertSort(object):
    def __init__(self):
        pass
    
    def sort(self, ls, mode=1, copy=True):
        # mode:1, for min to max, else max to min
        # copy: True for create a deep copy and don't change the original list
        
        if copy:
            from copy import deepcopy
            ls_copy = deepcopy(ls)
            if len(ls) <= 1:
                return ls_copy
            for i in range(1,len(ls_copy)):
                if ls_copy[i] < ls_copy[i-1]:
                    j = i
                    while j > 0 and (ls_copy[j] < ls_copy[j-1]):
                        ls_copy[j-1], ls_copy[j] = ls_copy[j], ls_copy[j - 1]
                        j -= 1
            if mode == 1:
                return ls_copy
            else:
                return ls_copy[::-1]
                
        else:
            if len(ls) <= 1:
                return ls
            for i in range(1,len(ls)):
                if ls[i] < ls[i-1]:
                    j = i
                    while j > 0 and (ls[j] < ls[j-1]):
                        ls[j-1], ls[j] = ls[j], ls[j - 1]
                        j -= 1
            
            if mode != 1:
                ls[::] = ls[::-1]
            return ls
            
